import java.util.*;
public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        requests();
        do {
            System.out.println("\nEnter a request:");
            String inputString = scanner.nextLine().toLowerCase();
            String[] list = inputString.split(" ");
            try {
                long input = Long.parseLong(list[0]);
                if (list.length == 1 && input > 0) {
                    happy(input);
                    lista1(input);
                } else if (list.length == 2 && input > 0) {
                    long inputList = Long.parseLong(list[1]);
                    if (inputList <= 0) {
                        System.out.println("The second parameter should be a natural number.");
                    } else {
                        lista2(input, inputList);
                    }
                } else if (list.length >= 3 && input > 0) {
                    long inputList = Long.parseLong(list[1]);
                    String[] propsArray = new String[list.length - 2];
                    String[] methods = new String[]{"even", "odd", "buzz", "duck", "palindromic", "gapful", "spy", 
                            "square", "sunny", "jumping", "happy", "sad", "-even", "-odd", "-buzz", "-duck", 
                            "-palindromic", "-gapful", "-spy", "-square", "-sunny", "-jumping", "-happy", "-sad"};
                    for (int i = 2; i < list.length; i++) {
                        propsArray[i - 2] = list[i];
                    }
                    if (inputList <= 0) {
                        System.out.println("The second parameter should be a natural number.");
                    } else {
                        List arrayList = Arrays.asList(methods);
                        List propsList = Arrays.asList(propsArray);
                        String excludentProps = null;
                        boolean excludentBoo = false;
                        for (String prop : propsArray) {
                            if (propsList.contains(prop) && propsList.contains("-" + prop)) {
                                excludentProps = "[" + prop.toUpperCase() + ", " + "-" + prop.toUpperCase() + "]";
                                excludentBoo = true;
                            }
                        }
                        boolean allProps = true;
                        String[] notProp = new String[12];
                        int notPropInt = 0;
                        for (String prop : propsArray) {
                            if (!arrayList.contains(prop)) {
                                allProps = false;
                                notProp[notPropInt] = prop;
                                notPropInt++;
                            }
                        }
                        if (allProps == false && notPropInt == 1) {
                            System.out.println("The property [" + notProp[0].toUpperCase() + "] is wrong.");
                            System.out.println("Available properties: [BUZZ, DUCK, PALINDROMIC, GAPFUL, SPY, EVEN, " +
                                    "ODD, SQUARE, SUNNY, JUMPING, HAPPY, SAD]");
                        } else if (allProps == false && notPropInt > 1) {
                            int countNotProp = 0;
                            for (int p = 0; p < notProp.length; p++) {
                                if (notProp[p] != null) {
                                    countNotProp++;
                                }
                            }
                            String[] countNotPropArr = new String[countNotProp];
                            for (int q = 0; q < countNotProp; q++) {
                                countNotPropArr[q] = notProp[q].toUpperCase();
                            }
                            System.out.println("The properties " + Arrays.asList(countNotPropArr) + " are wrong.");
                            System.out.println("Available properties: [BUZZ, DUCK, PALINDROMIC, GAPFUL, SPY, EVEN, " +
                                    "ODD, SQUARE, SUNNY, JUMPING, HAPPY, SAD]");
                        } else if (propsList.contains("even") && propsList.contains("odd") ||
                                propsList.contains("-even") && propsList.contains("-odd") ||
                                propsList.contains("duck") && propsList.contains("spy") ||
                                propsList.contains("-duck") && propsList.contains("-spy") ||
                                propsList.contains("square") && propsList.contains("sunny") ||
                                propsList.contains("-square") && propsList.contains("-sunny") ||
                                propsList.contains("happy") && propsList.contains("sad") ||
                                propsList.contains("-happy") && propsList.contains("-sad")) {
                            if (propsList.contains("even") && propsList.contains("odd")) {
                                System.out.println("The request contains mutually exclusive properties: [EVEN, ODD]");
                                System.out.println("There are no numbers with these properties.");
                            } else if (propsList.contains("-even") && propsList.contains("-odd")) {
                                System.out.println("The request contains mutually exclusive properties: [-EVEN, -ODD]");
                                System.out.println("There are no numbers with these properties.");
                            } else if (propsList.contains("duck") && propsList.contains("spy")) {
                                System.out.println("The request contains mutually exclusive properties: [DUCK, SPY]");
                                System.out.println("There are no numbers with these properties.");
                            } else if (propsList.contains("-duck") && propsList.contains("-spy")) {
                                System.out.println("The request contains mutually exclusive properties: [-DUCK, -SPY]");
                                System.out.println("There are no numbers with these properties.");
                            } else if (propsList.contains("square") && propsList.contains("sunny")) {
                                System.out.println("The request contains mutually exclusive properties: [SQUARE, SUNNY]");
                                System.out.println("There are no numbers with these properties.");
                            } else if (propsList.contains("-square") && propsList.contains("-sunny")) {
                                System.out.println("The request contains mutually exclusive properties: [-SQUARE, -SUNNY]");
                                System.out.println("There are no numbers with these properties.");
                            } else if (propsList.contains("happy") && propsList.contains("sad")) {
                                System.out.println("The request contains mutually exclusive properties: [HAPPY, SAD]");
                                System.out.println("There are no numbers with these properties.");
                            } else if (propsList.contains("-happy") && propsList.contains("-sad")) {
                                System.out.println("The request contains mutually exclusive properties: [-HAPPY, -SAD]");
                                System.out.println("There are no numbers with these properties.");
                            }
                        } else if (excludentBoo) {
                            System.out.println("The request contains mutually exclusive properties: " + excludentProps);
                            System.out.println("There are no numbers with these properties.");
                        } else {
                            lista3(input, inputList, propsArray);
                        }
                    }
                } else if (input < 0) {
                    System.out.println("The first parameter should be a natural number or zero.");
                } else if (input == 0) {
                    System.out.println("\nGood Bye!\n");
                    break;
                }
            } catch (NumberFormatException e) {
                requests();
            }
        } while (true);
    }

    public static void requests() {
        System.out.println("Welcome to Amazing Numbers!\n");
        System.out.println("Supported requests:");
        System.out.println("- enter a natural number to know its properties;");
        System.out.println("- enter two natural numbers to obtain the properties of the list:");
        System.out.println("  * the first parameter represents a starting number;");
        System.out.println("  * the second parameters show how many consecutive numbers are to be processed;");
        System.out.println("- two natural numbers and properties to search for;");
        System.out.println("- a property preceded by minus must not be present in numbers;");
        System.out.println("- separate the parameters with one space;");
        System.out.println("- enter 0 to exit.");
    }

    static void lista1(long input) {
        System.out.println("Properties of " + input);
        System.out.println("\teven:" + even(input));
        System.out.println("\todd:" + odd(input));
        System.out.println("\tbuzz:" + buzz(input));
        System.out.println("\tduck:" + duck(input));
        System.out.println("\tpalindromic:" + palindromic(input));
        System.out.println("\tgapful:" + gapful(input));
        System.out.println("\tspy:" + spy(input));
        System.out.println("\tsquare:" + square(input));
        System.out.println("\tsunny:" + sunny(input));
        System.out.println("\tjumping:" + jumping(input));
        System.out.println("\thappy:" + happy(input));
        System.out.println("\tsad:" + !happy(input));
    }

    static void lista2(long input, long inputList) {
        int i = 0;
        String[] methods = new String[]{"even", "odd", "buzz", "duck", "palindromic", "gapful", "spy", "square",
                "sunny", "jumping", "happy", "sad"};
        while (i < inputList) {
            System.out.print(input + " is ");
            boolean[] results = new boolean[12];
            results[0] = even(input);
            results[1] = odd(input);
            results[2] = buzz(input);
            results[3] = duck(input);
            results[4] = palindromic(input);
            results[5] = gapful(input);
            results[6] = spy(input);
            results[7] = square(input);
            results[8] = sunny(input);
            results[9] = jumping(input);
            results[10] = happy(input);
            results[11] = !happy(input);
            int count = 0;
            int j;
            for (j = 0; j < results.length; j++) {
                if (results[j]) {
                    count++;
                }
            }
            int k = 1;
            for (j = 0; j < results.length; j++) {
                if (results[j] && count == 1) {
                    System.out.print(methods[j]);
                } else if (results[j] && count > 1 && k < count) {
                    System.out. print(methods[j] + ", ");
                    k++;
                } else if (results[j] && count > 1 && k == count) {
                    System.out. print(methods[j]);
                }
            }
            i++;
            input++;
            System.out.println("");
        }
    }

    static void lista3(long input, long inputList, String[] propsArray) {
        int i = 0;
        String[] methods = new String[]{"even", "odd", "buzz", "duck", "palindromic", "gapful", "spy", "square",
            "sunny", "jumping", "happy", "sad"};
        List propsList = Arrays.asList(propsArray);
        while (i < inputList) {
            boolean result = true;
            int m = 0;
            for (String prop : propsArray) {
                switch (prop) {
                    case "even":
                        if (even(input)) {
                            m++;
                            break;
                        } else {
                            result = false;
                            break;
                        }
                    case "odd":
                        if (odd(input)) {
                            m++;
                            break;
                        } else {
                            result = false;
                            break;
                        }
                    case "buzz":
                        if (buzz(input)) {
                            m++;
                            break;
                        } else {
                            result = false;
                            break;
                        }
                    case "duck":
                        if (duck(input)) {
                            m++;
                            break;
                        } else {
                            result = false;
                            break;
                        }
                    case "palindromic":
                        if (palindromic(input)) {
                            m++;
                            break;
                        } else {
                            result = false;
                            break;
                        }
                    case "gapful":
                        if (gapful(input)) {
                            m++;
                            break;
                        } else {
                            result = false;
                            break;
                        }
                    case "spy":
                        if (spy(input)) {
                            m++;
                            break;
                        } else {
                            result = false;
                            break;
                        }
                    case "square":
                        if (square(input)) {
                            m++;
                            break;
                        } else {
                            result = false;
                            break;
                        }
                    case "sunny":
                        if (sunny(input)) {
                            m++;
                            break;
                        } else {
                            result = false;
                            break;
                        }
                    case "jumping":
                        if (jumping(input)) {
                            m++;
                            break;
                        } else {
                            result = false;
                            break;
                        }
                    case "happy":
                        if (happy(input)) {
                            m++;
                            break;
                        } else {
                            result = false;
                            break;
                        }
                    case "sad":
                        if (!happy(input)) {
                            m++;
                            break;
                        } else {
                            result = false;
                            break;
                        }
                }
                if (result == false) {
                    break;
                } else {
                    continue;
                }
            }
            if (result == false) {
                input++;
                continue;
            } else {
                boolean[] results = new boolean[12];
                results[0] = even(input);
                results[1] = odd(input);
                results[2] = buzz(input);
                results[3] = duck(input);
                results[4] = palindromic(input);
                results[5] = gapful(input);
                results[6] = spy(input);
                results[7] = square(input);
                results[8] = sunny(input);
                results[9] = jumping(input);
                results[10] = happy(input);
                results[11] = !happy(input);
                int count = 0;
                boolean notPropTrue = false;
                while (notPropTrue == false) {
                    for (int j = 0; j < results.length; j++) {
                        if (results[j] && propsList.contains("-" + methods[j])) {
                            notPropTrue = true;
                            input++;
                            break;
                        }
                    }
                    if (notPropTrue) {
                        break;
                    }
                    for (int c = 0; c < results.length; c++) {
                        if (results[c]) {
                            count++;
                        }
                    }
                    int k = 1;
                    System.out.print(input + " is ");
                    for (int b = 0; b < results.length; b++) {
                        if (results[b] && count == 1) {
                            System.out.print(methods[b]);
                        } else if (results[b] && count > 1 && k < count) {
                            System.out.print(methods[b] + ", ");
                            k++;
                        } else if (results[b] && count > 1 && k == count) {
                            System.out.print(methods[b]);
                        }
                    }
                    i++;
                    input++;
                    System.out.println("");
                    break;
                }
            }
        }
    }

        static boolean even(long input) {
             if (input % 2 == 0) {
                 return true;
             } else {
                 return false;
             }
         }

        static boolean odd(long input) {
             if (input % 2 != 0) {
                 return true;
             } else {
                 return false;
             }
         }

        static boolean buzz(long input) {
             boolean inputDivisible = input % 7 == 0;
             boolean inputModulo = input >= 10 && input % 10 != 0 && (input % 10) % 7 == 0;
             if (inputDivisible && inputModulo && input > 7 || input == 7) {
                 return true;
             } else if (inputDivisible && input > 7) {
                 return true;
             } else if (inputModulo && input > 7) {
                 return true;
             } else {
                 return false;
             }
         }

        static boolean duck(long input) {
             String inputA = String.valueOf(input);
             boolean duckNumber = false;
             for (int i = 0; i < inputA.length(); i++) {
                 if (inputA.charAt(i) == '0') {
                     duckNumber = true;
                 }
             }
             if (duckNumber == true) {
                 return true;
             } else {
                 return false;
             }
         }

        static boolean palindromic(long input) {
             String inputA = String.valueOf(input);
             char letra;
             String resultado = "";
             for (int i = inputA.length() - 1; i >= 0; i--) {
                 letra = inputA.charAt(i);
                 resultado = resultado + letra;
             }
             if (inputA.equals(resultado)) {
                 return true;
             } else {
                 return false;
             }
         }

        static boolean gapful(long input) {
             String inputA = String.valueOf(input);
             char primeiro = Character.valueOf(inputA.charAt(0));
             char ultimo = Character.valueOf(inputA.charAt(inputA.length() - 1));
             String div = primeiro + "" + ultimo;
             long divisor = Long.valueOf(div);
             if (inputA.length() >= 3 && input % divisor == 0) {
                 return true;
             } else {
                 return false;
             }
         }

        static boolean spy(long input) {
             String inputA = String.valueOf(input);
             long[] inputArray = new long[inputA.length()];
             int i = 0;
             for (i = 0; i < inputArray.length; i++) {
                 inputArray[i] = Long.valueOf(inputA.substring(i, i + 1));
             }
             i = 0;
             long spySum = 0;
             long spyMult = 1;
             while (i < inputArray.length) {
                 spySum += inputArray[i];
                 i++;
             }
             i = 0;
             while (i < inputArray.length) {
                 spyMult *= inputArray[i];
                 i++;
             }
             if (spySum == spyMult) {
                 return true;
             } else {
                 return false;
             }
         }

        static boolean square(long input) {
             if (input % Math.sqrt(input) == 0) {
                 return true;
             } else {
                 return false;
             }
         }

        static boolean sunny(long input) {
             if ((input + 1) % Math.sqrt(input + 1) == 0) {
                 return true;
             } else {
                 return false;
             }
         }

        static boolean jumping(long input) {
             String inputA = String.valueOf(input);
             long[] inputArray = new long[inputA.length()];
             for (int i = 0; i < inputArray.length; i++) {
                 inputArray[i] = Long.valueOf(inputA.substring(i, i + 1));
             }
             boolean result = true;
             for (int i = 1; i < inputArray.length; i++) {
                 if (inputArray[i] == inputArray[i - 1] + 1 || inputArray[i] == inputArray[i - 1] - 1) {
                     continue;
                 } else {
                     result = false;
                 }
             }
             if (result) {
                 return true;
             } else {
                 return false;
             }
        }
        static boolean happy(long input) {
            String inputA = String.valueOf(input);
            long[] arr = new long[30];
            for (int i = 0; i < inputA.length(); i++) {
                arr[i] = Long.parseLong(String.valueOf(inputA.charAt(i)));
            }
            long sum = 0;
            int test = 0;
            String[] testArray = new String[50];
            while (sum != 1) {
                sum = 0;
                for (long num : arr) {
                    sum += num * num;
                }
                for (int i = 0; i < arr.length; i++) {
                    arr[i] = 0;
                }
                int a = 0;
                String sumArr = String.valueOf(sum);
                if (sumArr.length() == 1) {
                    arr[a] = sum;
                } else {
                    for (a = 0; a < sumArr.length(); a++) {
                        arr[a] = Long.valueOf(sumArr.substring(a, a + 1));
                    }
                }
                boolean arrTestBoo = Arrays.asList(testArray).contains(sumArr);
                if (arrTestBoo) {
                    return false;
                } else {
                    testArray[test] = sumArr;
                    test++;
                }
            }
            return true;
        }
}
